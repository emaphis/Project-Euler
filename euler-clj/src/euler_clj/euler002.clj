(ns euler-clj.euler002
  (:require [midje.sweet :refer :all]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Even Fibonacci numbers
;;; Problem 2
;;
;; Each new term in the Fibonacci sequence is generated by adding the previous
;; two terms. By starting with 1 and 2, the first 10 terms will be:
;;
;;           1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;;
;; By considering the terms in the Fibonacci sequence whose values do not exceed
;; four million, find the sum of the even-valued terms.

(def fib-stream
  "generate a lazy stream of fibonacci numbers"
  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 2])))

(fact "test fib-stream examples"
  (take-while #(<= % 100) fib-stream) => '(1 2 3 5 8 13 21 34 55 89)
  (filter even? (take-while #(<= % 100) fib-stream)) => '(2 8 34)
  (apply + (filter even? (take-while #(<= % 100) fib-stream))) => 44)


(defn euler002
  "sum of even euler numbers up to 'n'"
  [n]
  (apply + (filter even? (take-while #(<= % n) fib-stream))))

(fact "example from problem"
  (euler002 100) => 44)

; (euler002 4000000)
